// GLSL Compute Shader "CSRelaxation"
// Generated by XShaderCompiler
// 11/10/2019 20:18:28

#version 430

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std140, row_major) uniform SceneState
{
    mat4  wvpMatrix;
    mat4  wMatrix;
    vec4  gravity;
    uvec2 gridSize;
    uvec2 _pad0;
    float damping;
    float dTime;
    float dStiffness;
    float _pad1;
    vec4  lightVec;
};

// Particle buffers
layout(std430) buffer parCurrPos
{
    vec4 g_parCurrPos[];
};

layout(std430) buffer parNextPos
{
    vec4 g_parNextPos[];
};

layout(std430) buffer parPrevPos
{
    vec4 g_parPrevPos[];
};

layout(std430) writeonly buffer parVelocity
{
    vec4 g_parVelocity[];
};

// Returns the particle index for the specified grid
uint GridPosToIndex(uvec2 gridPos)
{
    return (gridPos.y * gridSize.x + gridPos.x);
}

void main()
{
    uint idx = GridPosToIndex(gl_GlobalInvocationID.xy);
    
    // Adjust velocity and store current and previous position
    g_parCurrPos[idx] = g_parNextPos[idx];
    g_parVelocity[idx] = (g_parCurrPos[idx] - g_parPrevPos[idx]) / dTime;
    g_parPrevPos[idx] = g_parCurrPos[idx];
}

