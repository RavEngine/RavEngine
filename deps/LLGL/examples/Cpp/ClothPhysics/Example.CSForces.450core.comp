// GLSL Compute Shader "CSForces"
// Generated by XShaderCompiler
// 11/10/2019 20:18:28

#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std140, row_major, binding = 0) uniform SceneState
{
    mat4  wvpMatrix;
    mat4  wMatrix;
    vec4  gravity;
    uvec2 gridSize;
    uvec2 _pad0;
    float damping;
    float dTime;
    float dStiffness;
    float _pad1;
    vec4  lightVec;
};

// Particle buffers
layout(std430, binding = 1) readonly buffer parBase
{
    vec4 g_parBase[];
};

layout(std430, binding = 2) buffer parCurrPos
{
    vec4 g_parCurrPos[];
};

layout(std430, binding = 5) buffer parVelocity
{
    vec4 g_parVelocity[];
};

// Returns the particle index for the specified grid
uint GridPosToIndex(uvec2 gridPos)
{
    return (gridPos.y * gridSize.x + gridPos.x);
}

void main()
{
    uint idx = GridPosToIndex(gl_GlobalInvocationID.xy);
    
    // Accumulate force and multiply by inverse mass
    float invMass = g_parBase[idx].z;
    vec4 force = gravity;
    force *= vec4(invMass);
    
    // Apply velocity and damping
    g_parVelocity[idx] += force * dTime * damping;
    
    // Apply position based physics simulation
    g_parCurrPos[idx] += vec4(g_parVelocity[idx].xyz, 0.0) * dTime;
}

