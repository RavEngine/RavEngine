// GLSL compute shader to test SPIR-V reflection
// 2019-08-20

#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 1, std140) uniform constBuffer
{
    vec2 colorMapSizeInv;
    vec2 blendFactors;
};

layout(binding = 2, std430) buffer outBuffer
{
	vec4 outColors[];
};

layout(binding = 3) uniform texture2D colorMap;
layout(binding = 4, rgba32f) uniform writeonly image2D colorMapOut;
layout(binding = 5) uniform sampler linearSampler;
layout(binding = 6) uniform sampler2D combinedTexSamplers[2];

layout(push_constant) uniform pushConstants
{
    vec4 diffuseColor;
};

void main()
{
    // Get texture coordinate from thread ID
    ivec2 threadID = ivec2(gl_GlobalInvocationID.xy);
    vec2 texCoord = colorMapSizeInv * vec2(threadID);
    
    // Sample colors from input textures
    vec4 color0 = textureLod(sampler2D(colorMap, linearSampler), texCoord, 0.0);
    vec4 color1 = textureLod(combinedTexSamplers[0], texCoord, 0.0);
    vec4 color2 = textureLod(combinedTexSamplers[1], texCoord, 0.0);
    
    // Blend colors together
    vec4 blendColor = mix(color0, mix(color1, color2, blendFactors.x), blendFactors.y);
    
    // Write output data
    imageStore(colorMapOut, threadID, blendColor);
    outColors[gl_LocalInvocationIndex] = blendColor * diffuseColor;
}

