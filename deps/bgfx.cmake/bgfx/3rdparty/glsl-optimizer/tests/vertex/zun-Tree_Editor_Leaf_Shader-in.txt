struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
struct LeafSurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    vec3 Translucency;
    float Specular;
    float Gloss;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
    vec4 color;
};
struct v2f_surf {
    vec4 pos;
    float fog;
    vec2 hip_pack0;
    vec4 lop_color;
    vec3 lightDir;
    vec3 viewDir;
    vec3 _LightCoord;
};
uniform vec4 _Color;
uniform mat4 _LightMatrix0;
uniform vec4 _MainTex_ST;
uniform mat4 _Object2World;
uniform vec4 _Scale;
uniform float _SquashAmount;
uniform vec4 _SquashPlaneNormal;
uniform float _TimeX;
uniform vec4 _Wind;
uniform mat4 _World2Object;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;


uniform vec4 unity_Scale;
vec4 Squash( in vec4 pos );
void ExpandBillboard( in mat4 mat, inout vec4 pos, inout vec3 normal, inout vec4 tangent );
vec4 TriangleWave( in vec4 x );
vec4 SmoothCurve( in vec4 x );
vec4 SmoothTriangleWave( in vec4 x );
vec4 AnimateVertex( in vec4 pos, in vec3 normal, in vec4 animParams );
void TreeVertLeaf( inout appdata_full v );
void PositionFog( in vec4 v, out vec4 pos, out float fog );
vec3 ObjSpaceViewDir( in vec4 v );
vec3 ObjSpaceLightDir( in vec4 v );
v2f_surf vert_surf( in appdata_full v );
vec4 Squash( in vec4 pos ) {
    vec3 projectedVertex;
    vec3 planePoint;
    vec3 planeNormal;
    projectedVertex = pos.xyz ;
    planePoint = vec3( 0.000000, _SquashPlaneNormal.w , 0.000000);
    planeNormal = _SquashPlaneNormal.xyz ;
    projectedVertex += (dot( planeNormal, (planePoint - vec3( pos))) * planeNormal);
    pos = vec4( mix( projectedVertex, pos.xyz , vec3( _SquashAmount)), 1.00000);
    return pos;
}
void ExpandBillboard( in mat4 mat, inout vec4 pos, inout vec3 normal, inout vec4 tangent ) {
    float isBillboard;
    vec3 norb;
    vec3 tanb;
    isBillboard = (1.00000 - abs( tangent.w  ));
    norb = vec3( normalize( ( vec4( normal, 0.000000) * mat ) ));
    tanb = vec3( normalize( ( vec4( normal.z , 0.000000, ( -normal.x  ), 0.000000) * mat ) ));
    pos += (( tangent * mat ) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    tangent = mix( tangent, vec4( tanb, -1.00000), vec4( isBillboard));
}
vec4 TriangleWave( in vec4 x ) {
    return abs( ((fract( (x + 0.500000) ) * 2.00000) - 1.00000) );
}
vec4 SmoothCurve( in vec4 x ) {
    return ((x * x) * (3.00000 - (2.00000 * x)));
}
vec4 SmoothTriangleWave( in vec4 x ) {
    return SmoothCurve( TriangleWave( x));
}
vec4 AnimateVertex( in vec4 pos, in vec3 normal, in vec4 animParams ) {
    float fDetailAmp = 0.100000;
    float fBranchAmp = 0.300000;
    float fObjPhase;
    float fBranchPhase;
    float fVtxPhase;
    vec2 vWavesIn;
    vec4 vWaves;
    vec2 vWavesSum;
    vec3 bend;
    fObjPhase = dot( _Object2World[ 3 ].xyz , vec3( 1.00000));
    fBranchPhase = (fObjPhase + animParams.x );
    fVtxPhase = dot( pos.xyz , vec3( (animParams.y  + fBranchPhase)));
    vWavesIn = (_TimeX + vec2( fVtxPhase, fBranchPhase));
    vWaves = ((fract( (vWavesIn.xxyy  * vec4( 1.97500, 0.793000, 0.375000, 0.193000)) ) * 2.00000) - 1.00000);
    vWaves = SmoothTriangleWave( vWaves);
    vWavesSum = (vWaves.xz  + vWaves.yw );
    bend = ((animParams.y  * fDetailAmp) * normal.xyz );
    bend.y  = (animParams.w  * fBranchAmp);
    pos.xyz  += (((vWavesSum.xyx  * bend) + ((_Wind.xyz  * vWavesSum.y ) * animParams.w )) * _Wind.w );
    pos.xyz  += (animParams.z  * _Wind.xyz );
    return pos;
}
void TreeVertLeaf( inout appdata_full v ) {
    ExpandBillboard( gl_ModelViewMatrixInverseTranspose, v.vertex, v.normal, v.tangent);
    v.vertex.xyz  *= _Scale.xyz ;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy , v.texcoord1.xy ));
    v.vertex = Squash( v.vertex);
    v.color = vec4( (v.color.w  * _Color.xyz ), _Color.w );
    v.normal = normalize( v.normal );
    v.tangent.xyz  = normalize( v.tangent.xyz  );
}
void PositionFog( in vec4 v, out vec4 pos, out float fog ) {
    pos = ( gl_ModelViewProjectionMatrix * v );
    fog = pos.z ;
}
vec3 ObjSpaceViewDir( in vec4 v ) {
    vec3 objSpaceCameraPos;
    objSpaceCameraPos = (( _World2Object * vec4( _WorldSpaceCameraPos.xyz , 1.00000) ).xyz  * unity_Scale.w );
    return (objSpaceCameraPos - v.xyz );
}
vec3 ObjSpaceLightDir( in vec4 v ) {
    vec3 objSpaceLightPos;
    objSpaceLightPos = ( _World2Object * _WorldSpaceLightPos0 ).xyz ;
    return ((objSpaceLightPos.xyz  * unity_Scale.w ) - v.xyz );
}
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    vec3 binormal;
    mat3 rotation;
    TreeVertLeaf( v);
    PositionFog( v.vertex, o.pos, o.fog);
    o.hip_pack0.xy  = ((v.texcoord.xy  * _MainTex_ST.xy ) + _MainTex_ST.zw );
    o.lop_color = v.color;
    binormal = (cross( v.normal, v.tangent.xyz ) * v.tangent.w );
    rotation = mat3( v.tangent.x , binormal.x , v.normal.x , v.tangent.y , binormal.y , v.normal.y , v.tangent.z , binormal.z , v.normal.z );
    o.lightDir = ( rotation * ObjSpaceLightDir( v.vertex) );
    o.viewDir = ( rotation * ObjSpaceViewDir( v.vertex) );
    o._LightCoord = ( _LightMatrix0 * ( _Object2World * v.vertex ) ).xyz ;
    return o;
}
attribute vec4 TANGENT;
varying vec4 xlv_FOG;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4( gl_Vertex);
    xlt_v.tangent = vec4( TANGENT);
    xlt_v.normal = vec3( gl_Normal);
    xlt_v.texcoord = vec4( gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4( gl_MultiTexCoord1);
    xlt_v.color = vec4( gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_FOG = vec4( xl_retval.fog, 0.0, 0.0, 0.0);
    gl_TexCoord[0] = vec4( xl_retval.hip_pack0, 0.0, 0.0);
    gl_FrontColor = vec4( xl_retval.lop_color);
    gl_TexCoord[1] = vec4( xl_retval.lightDir, 0.0);
    gl_TexCoord[2] = vec4( xl_retval.viewDir, 0.0);
    gl_TexCoord[3] = vec4( xl_retval._LightCoord, 0.0);
}
