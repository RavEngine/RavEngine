mat3 xll_constructMat3( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
};
struct v2f_surf {
    vec4 pos;
    float fog;
    vec2 hip_pack0;
    vec3 normal;
    vec3 vlight;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform vec4 _MainTex_ST;
uniform mat4 _Object2World;

uniform vec4 unity_SHAb;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHC;
uniform vec4 unity_Scale;
vec3 ShadeSH9( in vec4 normal );
void PositionFog( in vec4 v, out vec4 pos, out float fog );
v2f_surf vert_surf( in appdata_full v );
vec3 ShadeSH9( in vec4 normal ) {
    vec3 x1;
    vec4 vB;
    vec3 x2;
    float vC;
    vec3 x3;
    x1.x  = dot( unity_SHAr, normal);
    x1.y  = dot( unity_SHAg, normal);
    x1.z  = dot( unity_SHAb, normal);
    vB = (normal.xyzz  * normal.yzzx );
    x2.x  = dot( unity_SHBr, vB);
    x2.y  = dot( unity_SHBg, vB);
    x2.z  = dot( unity_SHBb, vB);
    vC = ((normal.x  * normal.x ) - (normal.y  * normal.y ));
    x3 = (unity_SHC.xyz  * vC);
    return ((x1 + x2) + x3);
}
void PositionFog( in vec4 v, out vec4 pos, out float fog ) {
    pos = ( gl_ModelViewProjectionMatrix * v );
    fog = pos.z ;
}
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    vec3 worldN;
    vec3 shlight;
    PositionFog( v.vertex, o.pos, o.fog);
    o.hip_pack0.xy  = ((v.texcoord.xy  * _MainTex_ST.xy ) + _MainTex_ST.zw );
    worldN = ( xll_constructMat3( _Object2World) * (v.normal * unity_Scale.w ) );
    o.normal = worldN;
    shlight = ShadeSH9( vec4( worldN, 1.00000));
    o.vlight = shlight;
    return o;
}
attribute vec4 TANGENT;
varying vec4 xlv_FOG;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4( gl_Vertex);
    xlt_v.tangent = vec4( TANGENT);
    xlt_v.normal = vec3( gl_Normal);
    xlt_v.texcoord = vec4( gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4( gl_MultiTexCoord1);
    xlt_v.color = vec4( gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_FOG = vec4( xl_retval.fog, 0.0, 0.0, 0.0);
    gl_TexCoord[0] = vec4( xl_retval.hip_pack0, 0.0, 0.0);
    gl_TexCoord[1] = vec4( xl_retval.normal, 0.0);
    gl_TexCoord[2] = vec4( xl_retval.vlight, 0.0);
}
