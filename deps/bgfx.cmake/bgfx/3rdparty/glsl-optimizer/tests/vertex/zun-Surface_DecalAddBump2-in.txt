mat3 xll_constructMat3( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct Input {
    vec2 uv_Decal;
    vec2 uv_DecalBump;
};
struct v2f_surf {
    vec4 pos;
    float fog;
    vec4 hip_pack0;
    vec2 hip_lmap;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform vec4 _DecalBump_ST;
uniform vec4 _Decal_ST;
uniform mat4 _Object2World;

uniform vec4 unity_LightmapST;
uniform vec4 unity_Scale;
void PositionFog( in vec4 v, out vec4 pos, out float fog );
v2f_surf vert_surf( in appdata_full v );
void PositionFog( in vec4 v, out vec4 pos, out float fog ) {
    pos = ( gl_ModelViewProjectionMatrix * v );
    fog = pos.z ;
}
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    vec3 worldN;
    vec3 binormal;
    mat3 rotation;
    PositionFog( v.vertex, o.pos, o.fog);
    o.hip_pack0.xy  = ((v.texcoord.xy  * _Decal_ST.xy ) + _Decal_ST.zw );
    o.hip_pack0.zw  = ((v.texcoord.xy  * _DecalBump_ST.xy ) + _DecalBump_ST.zw );
    o.hip_lmap.xy  = ((v.texcoord1.xy  * unity_LightmapST.xy ) + unity_LightmapST.zw );
    worldN = ( xll_constructMat3( _Object2World) * (v.normal * unity_Scale.w ) );
    binormal = (cross( v.normal, v.tangent.xyz ) * v.tangent.w );
    rotation = mat3( v.tangent.x , binormal.x , v.normal.x , v.tangent.y , binormal.y , v.normal.y , v.tangent.z , binormal.z , v.normal.z );
    return o;
}
attribute vec4 TANGENT;
varying vec4 xlv_FOG;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4( gl_Vertex);
    xlt_v.tangent = vec4( TANGENT);
    xlt_v.normal = vec3( gl_Normal);
    xlt_v.texcoord = vec4( gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4( gl_MultiTexCoord1);
    xlt_v.color = vec4( gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_FOG = vec4( xl_retval.fog, 0.0, 0.0, 0.0);
    gl_TexCoord[0] = vec4( xl_retval.hip_pack0);
    gl_TexCoord[1] = vec4( xl_retval.hip_lmap, 0.0, 0.0);
}
