struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
struct Input {
    vec2 uv_MainTex;
};
struct v2f_surf {
    vec4 pos;
    vec3 vec;
};
uniform vec4 _Color;
uniform vec4 _LightPositionRange;
uniform sampler2D _MainTex;
void surf( in Input IN, inout SurfaceOutput o );
vec4 EncodeFloatRGBA( in float v );
vec4 frag_surf( in v2f_surf IN );
void surf( in Input IN, inout SurfaceOutput o ) {
    vec4 c;
    c = (texture2D( _MainTex, IN.uv_MainTex) * _Color);
    o.Albedo = c.xyz ;
    o.Alpha = c.w ;
}
vec4 EncodeFloatRGBA( in float v ) {
    vec4 kEncodeMul = vec4( 1.00000, 255.000, 65025.0, 1.60581e+008);
    float kEncodeBit = 0.00392157;
    vec4 enc;
    enc = (kEncodeMul * v);
    enc = fract( enc );
    enc -= (enc.yzww  * kEncodeBit);
    return enc;
}
vec4 frag_surf( in v2f_surf IN ) {
    SurfaceOutput o;
    Input surfIN;
    o.Albedo = vec3( 0.000000);
    o.Emission = vec3( 0.000000);
    o.Specular = 0.000000;
    o.Alpha = 0.000000;
    o.Gloss = 0.000000;
    surf( surfIN, o);
    return EncodeFloatRGBA( (length( IN.vec ) * _LightPositionRange.w ));
}
void main() {
    vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.vec = vec3( gl_TexCoord[0]);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
