void xll_clip(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
struct Input {
    vec2 uv_MainTex;
};
struct v2f_surf {
    vec4 pos;
    float fog;
    vec2 hip_pack0;
    vec4 hip_screen;
    vec3 hip_lmapFade;
};
uniform vec4 _Color;
uniform float _Cutoff;
uniform sampler2D _LightBuffer;
uniform sampler2D _MainTex;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
void surf( in Input IN, inout SurfaceOutput o );
vec4 LightingLambert_PrePass( in SurfaceOutput s, in vec4 light );
vec3 DecodeLightmap( in vec4 color );
vec4 frag_surf( in v2f_surf IN );
void surf( in Input IN, inout SurfaceOutput o ) {
    vec4 c;
    c = (texture2D( _MainTex, IN.uv_MainTex) * _Color);
    o.Albedo = c.xyz ;
    o.Alpha = c.w ;
}
vec4 LightingLambert_PrePass( in SurfaceOutput s, in vec4 light ) {
    vec4 c;
    c.xyz  = (s.Albedo * light.xyz );
    c.w  = s.Alpha;
    return c;
}
vec3 DecodeLightmap( in vec4 color ) {
    return (2.00000 * color.xyz );
}
vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    SurfaceOutput o;
    vec4 light;
    vec3 lmFull;
    vec3 lmIndirect;
    vec3 lm;
    vec4 col;
    surfIN.uv_MainTex = IN.hip_pack0.xy ;
    o.Albedo = vec3( 0.000000);
    o.Emission = vec3( 0.000000);
    o.Specular = 0.000000;
    o.Alpha = 0.000000;
    o.Gloss = 0.000000;
    surf( surfIN, o);
    xll_clip( (o.Alpha - _Cutoff) );
    light = texture2DProj( _LightBuffer, IN.hip_screen);
    light = ( -log2( light ) );
    lmFull = DecodeLightmap( texture2D( unity_Lightmap, IN.hip_lmapFade.xy ));
    lmIndirect = DecodeLightmap( texture2D( unity_LightmapInd, IN.hip_lmapFade.xy ));
    lm = mix( lmIndirect, lmFull, vec3( xll_saturate( IN.hip_lmapFade.z  )));
    light.xyz  += lm;
    col = LightingLambert_PrePass( o, light);
    return col;
}
varying vec4 xlv_FOG;
void main() {
    vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.fog = float( xlv_FOG);
    xlt_IN.hip_pack0 = vec2( gl_TexCoord[0]);
    xlt_IN.hip_screen = vec4( gl_TexCoord[1]);
    xlt_IN.hip_lmapFade = vec3( gl_TexCoord[2]);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
