struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
struct LeafSurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    vec3 Translucency;
    float Specular;
    float Gloss;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
    vec4 color;
};
struct v2f_surf {
    vec4 pos;
};
uniform sampler2D _BumpSpecMap;
uniform sampler2D _MainTex;
uniform sampler2D _TranslucencyMap;
vec4 UnpackNormal( in vec4 packednormal );
void surf( in Input IN, inout SurfaceOutput o );
vec4 frag_surf( in v2f_surf IN );
vec4 UnpackNormal( in vec4 packednormal ) {
    vec4 normal;
    normal.xy  = ((packednormal.wy  * 2.00000) - 1.00000);
    normal.z  = sqrt( ((1.00000 - (normal.x  * normal.x )) - (normal.y  * normal.y )) );
    return normal;
}
void surf( in Input IN, inout SurfaceOutput o ) {
    vec4 c;
    vec4 trngls;
    vec4 norspc;
    c = texture2D( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz  * IN.color.xyz );
    trngls = texture2D( _TranslucencyMap, IN.uv_MainTex);
    o.Gloss = trngls.w ;
    o.Alpha = IN.color.w ;
    norspc = texture2D( _BumpSpecMap, IN.uv_MainTex);
    o.Specular = norspc.x ;
    o.Normal = vec3( UnpackNormal( norspc));
}
vec4 frag_surf( in v2f_surf IN ) {
    SurfaceOutput o;
    Input surfIN;
    o.Albedo = vec3( 0.000000);
    o.Emission = vec3( 0.000000);
    o.Specular = 0.000000;
    o.Alpha = 0.000000;
    o.Gloss = 0.000000;
    surf( surfIN, o);
    return vec4( 0.000000);
}
void main() {
    vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
