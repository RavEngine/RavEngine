void xll_clip(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
    vec3 worldPos;
};
struct v2f_surf {
    vec4 pos;
    vec3 _ShadowCoord0;
    vec3 _ShadowCoord1;
    vec3 _ShadowCoord2;
    vec3 _ShadowCoord3;
    vec2 _ShadowZFade;
    vec3 worldPos;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform vec4 _LightShadowData;
uniform vec4 _LightSplitsFar;
uniform vec4 _LightSplitsNear;
uniform sampler2D _MainTex;
uniform vec4 _ProjectionParams;
uniform sampler2D _ShadowMapTexture;
void surf( in Input IN, inout SurfaceOutput o );
vec2 EncodeFloatRG( in float v );
vec4 frag_surf( in v2f_surf IN );
void surf( in Input IN, inout SurfaceOutput o ) {
    xll_clip( (fract( ((IN.worldPos.y  + (IN.worldPos.z  * 0.100000)) * 5.00000) ) - 0.500000) );
    o.Albedo = texture2D( _MainTex, IN.uv_MainTex).xyz ;
}
vec2 EncodeFloatRG( in float v ) {
    vec2 kEncodeMul = vec2( 1.00000, 255.000);
    float kEncodeBit = 0.00392157;
    vec2 enc;
    enc = (kEncodeMul * v);
    enc = fract( enc );
    enc.x  -= (enc.y  * kEncodeBit);
    return enc;
}
vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    SurfaceOutput o;
    vec4 z;
    vec4 near;
    vec4 far;
    vec4 weights;
    vec4 coord;
    float shadow;
    float faded;
    vec4 res;
    surfIN.worldPos = IN.worldPos;
    o.Albedo = vec3( 0.000000);
    o.Emission = vec3( 0.000000);
    o.Specular = 0.000000;
    o.Alpha = 0.000000;
    o.Gloss = 0.000000;
    surf( surfIN, o);
    z = vec4( IN._ShadowZFade.x );
    near = vec4( greaterThanEqual( z, _LightSplitsNear) );
    far = vec4( lessThan( z, _LightSplitsFar) );
    weights = (near * far);
    coord = vec4( ((((IN._ShadowCoord0 * weights.x ) + (IN._ShadowCoord1 * weights.y )) + (IN._ShadowCoord2 * weights.z )) + (IN._ShadowCoord3 * weights.w )), 1.00000);
    shadow = ( (texture2D( _ShadowMapTexture, coord.xy ).x  < coord.z ) ) ? ( _LightShadowData.x  ) : ( 1.00000 );
    faded = xll_saturate( (shadow + xll_saturate( IN._ShadowZFade.y  )) );
    res.x  = faded;
    res.y  = 1.00000;
    res.zw  = EncodeFloatRG( float( (1.00000 - (z * _ProjectionParams.w ))));
    return res;
}
void main() {
    vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3( gl_TexCoord[0]);
    xlt_IN._ShadowCoord1 = vec3( gl_TexCoord[1]);
    xlt_IN._ShadowCoord2 = vec3( gl_TexCoord[2]);
    xlt_IN._ShadowCoord3 = vec3( gl_TexCoord[3]);
    xlt_IN._ShadowZFade = vec2( gl_TexCoord[4]);
    xlt_IN.worldPos = vec3( gl_TexCoord[5]);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
