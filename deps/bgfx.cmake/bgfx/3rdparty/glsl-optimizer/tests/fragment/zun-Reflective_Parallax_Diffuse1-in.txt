struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
    vec2 uv_BumpMap;
    vec3 worldRefl;
    vec3 viewDir;
    vec3 TtoW0;
    vec3 TtoW1;
    vec3 TtoW2;
};
struct v2f_surf {
    vec4 pos;
    float fog;
    vec4 hip_pack0;
    vec3 viewDir;
    vec4 hip_screen;
    vec4 TtoW0;
    vec4 TtoW1;
    vec4 TtoW2;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform sampler2D _BumpMap;
uniform vec4 _Color;
uniform samplerCube _Cube;
uniform sampler2D _LightBuffer;
uniform sampler2D _MainTex;
uniform float _Parallax;
uniform sampler2D _ParallaxMap;
uniform vec4 _ReflectColor;
uniform vec4 unity_Ambient;
vec4 UnpackNormal( in vec4 packednormal );
vec2 ParallaxOffset( in float h, in float height, in vec3 viewDir );
void surf( in Input IN, inout SurfaceOutput o );
vec4 LightingLambert_PrePass( in SurfaceOutput s, in vec4 light );
vec4 frag_surf( in v2f_surf IN );
vec4 UnpackNormal( in vec4 packednormal ) {
    vec4 normal;
    normal.xy  = ((packednormal.wy  * 2.00000) - 1.00000);
    normal.z  = sqrt( ((1.00000 - (normal.x  * normal.x )) - (normal.y  * normal.y )) );
    return normal;
}
vec2 ParallaxOffset( in float h, in float height, in vec3 viewDir ) {
    vec3 v;
    h = ((h * height) - (height / 2.00000));
    v = normalize( viewDir );
    v.z  += 0.420000;
    return (h * (v.xy  / v.z ));
}
void surf( in Input IN, inout SurfaceOutput o ) {
    float h;
    vec2 offset;
    vec4 tex;
    vec4 c;
    vec3 worldRefl;
    vec4 reflcol;
    h = texture2D( _ParallaxMap, IN.uv_BumpMap).w ;
    offset = ParallaxOffset( h, _Parallax, IN.viewDir);
    IN.uv_MainTex += offset;
    IN.uv_BumpMap += offset;
    tex = texture2D( _MainTex, IN.uv_MainTex);
    c = (tex * _Color);
    o.Albedo = c.xyz ;
    o.Normal = vec3( UnpackNormal( texture2D( _BumpMap, IN.uv_BumpMap)));
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal)));
    reflcol = textureCube( _Cube, worldRefl);
    reflcol *= tex.w ;
    o.Emission = (reflcol.xyz  * _ReflectColor.xyz );
    o.Alpha = (reflcol.w  * _ReflectColor.w );
}
vec4 LightingLambert_PrePass( in SurfaceOutput s, in vec4 light ) {
    vec4 c;
    c.xyz  = (s.Albedo * light.xyz );
    c.w  = s.Alpha;
    return c;
}
vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    SurfaceOutput o;
    vec4 light;
    vec4 col;
    surfIN.uv_MainTex = IN.hip_pack0.xy ;
    surfIN.uv_BumpMap = IN.hip_pack0.zw ;
    surfIN.worldRefl = vec3( IN.TtoW0.w , IN.TtoW1.w , IN.TtoW2.w );
    surfIN.TtoW0 = IN.TtoW0.xyz ;
    surfIN.TtoW1 = IN.TtoW1.xyz ;
    surfIN.TtoW2 = IN.TtoW2.xyz ;
    surfIN.viewDir = IN.viewDir;
    o.Albedo = vec3( 0.000000);
    o.Emission = vec3( 0.000000);
    o.Specular = 0.000000;
    o.Alpha = 0.000000;
    o.Gloss = 0.000000;
    surf( surfIN, o);
    light = texture2DProj( _LightBuffer, IN.hip_screen);
    light = ( -log2( light ) );
    light.xyz  += unity_Ambient.xyz ;
    col = LightingLambert_PrePass( o, light);
    col.xyz  += o.Emission;
    return col;
}
varying vec4 xlv_FOG;
void main() {
    vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.fog = float( xlv_FOG);
    xlt_IN.hip_pack0 = vec4( gl_TexCoord[0]);
    xlt_IN.viewDir = vec3( gl_TexCoord[1]);
    xlt_IN.hip_screen = vec4( gl_TexCoord[2]);
    xlt_IN.TtoW0 = vec4( gl_TexCoord[3]);
    xlt_IN.TtoW1 = vec4( gl_TexCoord[4]);
    xlt_IN.TtoW2 = vec4( gl_TexCoord[5]);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
