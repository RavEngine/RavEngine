#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_cbSimulationConstants
{
    float timeStep;
    float wallStiffness;
    float4 gravity;
    float3 planes[4];
};

struct Particle
{
    float2 position;
    float2 velocity;
};

struct type_RWStructuredBuffer_Particle
{
    Particle _m0[1];
};

struct type_StructuredBuffer_Particle
{
    Particle _m0[1];
};

struct ParticleForces
{
    float2 acceleration;
};

struct type_StructuredBuffer_ParticleForces
{
    ParticleForces _m0[1];
};

kernel void main0(constant type_cbSimulationConstants& cbSimulationConstants [[buffer(0)]], device type_RWStructuredBuffer_Particle& particlesRW [[buffer(1)]], const device type_StructuredBuffer_Particle& particlesRO [[buffer(2)]], const device type_StructuredBuffer_ParticleForces& particlesForcesRO [[buffer(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    float2 _53 = particlesRO._m0[gl_GlobalInvocationID.x].velocity;
    float2 _57;
    _57 = particlesForcesRO._m0[gl_GlobalInvocationID.x].acceleration;
    for (uint _60 = 0u; _60 < 4u; )
    {
        _57 += (cbSimulationConstants.planes[_60].xy * (fast::min(dot(float3(particlesRO._m0[gl_GlobalInvocationID.x].position, 1.0), cbSimulationConstants.planes[_60]), 0.0) * (-cbSimulationConstants.wallStiffness)));
        _60++;
        continue;
    }
    float2 _84 = _53 + ((_57 + cbSimulationConstants.gravity.xy) * cbSimulationConstants.timeStep);
    particlesRW._m0[gl_GlobalInvocationID.x].position = particlesRO._m0[gl_GlobalInvocationID.x].position + (_84 * cbSimulationConstants.timeStep);
    particlesRW._m0[gl_GlobalInvocationID.x].velocity = _84;
}

