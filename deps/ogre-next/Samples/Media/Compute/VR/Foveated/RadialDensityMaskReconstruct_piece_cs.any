@piece( HeaderCS )
	CONST_BUFFER_STRUCT_BEGIN( RdmShaderParams, 0 )
	{
		float4 rightEyeStart_radius;
		float4 leftEyeCenter_rightEyeCenter;
		float4 invBlockResolution_invResolution;
	}
	CONST_BUFFER_STRUCT_END( p );

	#define leftEyeCenter			leftEyeCenter_rightEyeCenter.xy
	#define rightEyeCenter			leftEyeCenter_rightEyeCenter.zw
	#define rightEyeStart			rightEyeStart_radius.x
	#define radius					rightEyeStart_radius.yzw
	#define invBlockResolution		invBlockResolution_invResolution.xy
	#define invResolution			invBlockResolution_invResolution.zw

	@insertpiece( DeclSRgbFuncs )

	/** Takes the pattern (low quality):
			ab xx ef xx
			cd xx gh xx
			xx ij xx mn
			xx kl xx op
		And outputs:
			ab ab ef ef
			cd cd gh gh
			ik ij mn mn
			kl kl op op
	*/
	INLINE void reconstructHalfResLow( wshort2 dstUV, ushort2 uFragCoordHalf )
	{
		short2 offset;
		if( (uFragCoordHalf.x & 0x01u) != (uFragCoordHalf.y & 0x01u) )
			offset.x = (uFragCoordHalf.y & 0x01u) == 0 ? -2 : 2;
		else
			offset.x = 0;
		offset.y = 0;

		rshort2 uv = rshort2( short2( dstUV ) + offset );
		float4 srcVal = OGRE_Load2D( srcTex, uv.xy, 0 );

		OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( srcVal ) );
	}

	/** For non-rendered pixels, it averages the closest neighbours eg.
			ab
			cd
		 ef xy ij
		 gh zw kl
			mn
			op
		x = avg( f, c )
		y = avg( d, i )
		z = avg( h, m )
		w = avg( n, k )

		For rendered samples, it averages diagonals:
		ef
		gh
			ab
			cd
		outputs:
		h' = avg( a, h )
		a' = avg( a, h )
	*/
	INLINE void reconstructHalfResMedium( wshort2 dstUV, ushort2 uFragCoordHalf )
	{
		if( (uFragCoordHalf.x & 0x01u) != (uFragCoordHalf.y & 0x01u) )
		{
			short2 offset0;
			short2 offset1;
			offset0.x = (dstUV.x & 0x01) == 0 ? -1 : 1;
			offset0.y = 0;

			offset1.x = 0;
			offset1.y = (dstUV.y & 0x01) == 0 ? -1 : 1;

			rshort2 uv0 = rshort2( short2( dstUV ) + offset0 );
			float4 srcVal0 = OGRE_Load2D( srcTex, uv0.xy, 0 );
			rshort2 uv1 = rshort2( short2( dstUV ) + offset1 );
			float4 srcVal1 = OGRE_Load2D( srcTex, uv1.xy, 0 );

			OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( (srcVal0 + srcVal1) * 0.5f ) );
		}
		else
		{
			rshort2 uv = rshort2( dstUV );
			float4 srcVal = OGRE_Load2D( srcTex, uv.xy, 0 );

			short2 offset0;
			offset0.x = (dstUV.x & 0x01) == 0 ? -1 : 1;
			offset0.y = (dstUV.y & 0x01) == 0 ? -1 : 1;

			rshort2 uv0 = rshort2( short2( dstUV ) + offset0 );
			float4 srcVal0 = OGRE_Load2D( srcTex, uv0.xy, 0 );

			OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( (srcVal + srcVal0) * 0.5f ) );
		}
	}

	/* Uses Valve's Alex Vlachos Advanced VR Rendering Performance technique
	   (bilinear approximation) GDC 2016
	*/
	INLINE void reconstructHalfResHigh( wshort2 dstUV, ushort2 uFragCoordHalf )
	{
		if( (uFragCoordHalf.x & 0x01u) != (uFragCoordHalf.y & 0x01u) )
		{
			float2 offset0;
			float2 offset1;
			offset0.x = (dstUV.x & 0x01) == 0 ? -0.5f : 1.5f;
			offset0.y =	(dstUV.y & 0x01) == 0 ? 0.75f : 0.25f;

			offset1.x = (dstUV.x & 0x01) == 0 ? 0.75f : 0.25f;
			offset1.y = (dstUV.y & 0x01) == 0 ? -0.5f : 1.5f;

			float2 offset0N = offset0;
			offset0N.x = (dstUV.x & 0x01) == 0 ? 2.5f : -1.5f;
			float2 offset1N = offset1;
			offset1N.y = (dstUV.y & 0x01) == 0 ? 2.5f : -1.5f;

			float2 uv0 = ( float2( dstUV ) + offset0 ) * p.invResolution;
			float4 srcVal0 = OGRE_SampleLevel( srcTex, bilinearSampler, uv0.xy, 0 );
			float2 uv1 = ( float2( dstUV ) + offset1 ) * p.invResolution;
			float4 srcVal1 = OGRE_SampleLevel( srcTex, bilinearSampler, uv1.xy, 0 );
			float2 uv0N = ( float2( dstUV ) + offset0N ) * p.invResolution;
			float4 srcVal0N = OGRE_SampleLevel( srcTex, bilinearSampler, uv0N.xy, 0 );
			float2 uv1N = ( float2( dstUV ) + offset1N ) * p.invResolution;
			float4 srcVal1N = OGRE_SampleLevel( srcTex, bilinearSampler, uv1N.xy, 0 );

			float4 finalVal = srcVal0 * 0.375f + srcVal1 * 0.375f + srcVal0N * 0.125f + srcVal1N * 0.125f;
			OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( finalVal ) );
		}
		else
		{
			float2 uv = float2( dstUV );
			uv.x += (dstUV.x & 0x01) == 0 ? 0.75f : 0.25f;
			uv.y += (dstUV.y & 0x01) == 0 ? 0.75f : 0.25f;
			uv.xy *= p.invResolution;
			float4 srcVal = OGRE_SampleLevel( srcTex, bilinearSampler, uv.xy, 0 );

			rshort2 uv0 = rshort2( uFragCoordHalf << 1u );
			float4 srcTL = OGRE_Load2D( srcTex, uv0 + rshort2( -1, -1 ), 0 );
			float4 srcTR = OGRE_Load2D( srcTex, uv0 + rshort2(  2, -1 ), 0 );
			float4 srcBL = OGRE_Load2D( srcTex, uv0 + rshort2( -1,  2 ), 0 );
			float4 srcBR = OGRE_Load2D( srcTex, uv0 + rshort2(  2,  2 ), 0 );

			float weights[4] =
				OGRE_ARRAY_START( float ) 0.28125f, 0.09375f, 0.09375f, 0.03125f OGRE_ARRAY_END;

			int idx = (dstUV.x & 0x01) + ((dstUV.y & 0x01) << 1u);

			float4 finalVal =	srcVal * 0.5f +
								srcTL * weights[(idx + 0)] +
								srcTR * weights[(idx + 1) & 0x03] +
								srcBL * weights[(idx + 2) & 0x03] +
								srcBR * weights[(idx + 3) & 0x03];

			OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( finalVal ) );
		}
	}

	/** Takes the pattern:
			a b x x
			c d x x
			x x x x
			x x x x
		And outputs:
			a b a b
			c d c d
			a b a b
			c d c d
	*/
	INLINE void reconstructQuarterRes( wshort2 dstUV, ushort2 uFragCoordHalf )
	{
		/* This outputs:
			a a b b
			a a b b
			c c d d
			c c d d
		But it looks MUCH worse so it's not used

		short2 offset = -(dstUV & 0x03);
		rshort2 uv = rshort2( short2( dstUV ) + offset );
		float4 srcVal = OGRE_Load2D( srcTex, uv.xy, 0 );
		OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( srcVal ) );*/

		short2 offset;
		offset.x = (uFragCoordHalf.x & 0x01u) == 0 ? 0 : -2;
		offset.y = (uFragCoordHalf.y & 0x01u) == 0 ? 0 : -2;

		rshort2 uv = rshort2( short2( dstUV ) + offset );
		float4 srcVal = OGRE_Load2D( srcTex, uv.xy, 0 );

		OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( srcVal ) );
	}

	/** Same as reconstructQuarterRes, but a lot more samples to repeat:
			a b x x x x x x
			c d x x x x x x
			x x x x x x x x
			x x x x x x x x
			x x x x x x x x
			x x x x x x x x
			x x x x x x x x
			x x x x x x x x
		And outputs:
			a b a b a b a b
			c d c d c d c d
			a b a b a b a b
			c d c d c d c d
			a b a b a b a b
			c d c d c d c d
			a b a b a b a b
			c d c d c d c d
	*/
	INLINE void reconstructSixteenthRes( wshort2 dstUV, ushort2 uFragCoordHalf )
	{
		int2 block = int2( uFragCoordHalf ) & 0x03;

		short2 offset;
		offset.x = block.x * -2;
		offset.y = block.y * -2;

		rshort2 uv = rshort2( short2( dstUV ) + offset );
		float4 srcVal = OGRE_Load2D( srcTex, uv.xy, 0 );

		OGRE_imageWrite2D4( dstTex, dstUV, toSRGB( srcVal ) );
	}
@end

@piece( BodyCS )
	ushort2 currentUV = ushort2( gl_GlobalInvocationID.xy );
	ushort2 uFragCoordHalf = ushort2( currentUV >> 1u );

	bool bIsRightEye = currentUV.x >= p.rightEyeStart;
	float2 eyeCenter = bIsRightEye ? p.rightEyeCenter : p.leftEyeCenter;

	//We must work in blocks so the reconstruction filter can work properly
	float2 toCenter = (currentUV >> 3u) * p.invBlockResolution.xy - eyeCenter;
	toCenter.x *= 2.0f; //Twice because of stereo (each eye is half the size of the full res)
	float distToCenter = length( toCenter );

	float2 toCenterFullRes = currentUV * p.invResolution.xy - eyeCenter;
	//We make distToBox one pixel bigger in the Y value because due to the Top-left
	//rule of rasterization, there's a row of pixels that was left outside the safe zone)
	float distToBox = max( abs( toCenterFullRes.x * 2.0f ),
						   abs( toCenterFullRes.y ) + p.invResolution.y );

	//We know for a fact distToCenter is in blocks of 8x8
	if( anyInvocationARB( distToCenter >= p.radius.x ) && distToBox >= p.radius.x )
	{
		if( anyInvocationARB( distToCenter < p.radius.y ) )
		{
			@property( quality == low )
				reconstructHalfResLow( wshort2( currentUV ), uFragCoordHalf );
			@else
				if( anyInvocationARB( distToCenter + p.invBlockResolution.x * 2.0 < p.radius.y ) )
				{
					//Right next to the border with lower res rendering.
					//We can't use anything else than low quality filter
					reconstructHalfRes@insertpiece( Quality )( wshort2( currentUV ), uFragCoordHalf );
				}
				else
				{
					reconstructHalfResLow( wshort2( currentUV ), uFragCoordHalf );
				}
			@end
		}
		else if( anyInvocationARB( distToCenter < p.radius.z ) )
		{
			reconstructQuarterRes( wshort2( currentUV ), uFragCoordHalf );
		}
		else
		{
			reconstructSixteenthRes( wshort2( currentUV ), uFragCoordHalf );
		}
	}
	else
	{
		OGRE_imageWrite2D4( dstTex, currentUV, toSRGB( OGRE_Load2D( srcTex, rshort2( currentUV ), 0 ) ) );
	}
@end
