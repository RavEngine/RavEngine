
//#include "SyntaxHighlightingMisc.h"

/// This compute shader simply converts 2 cubemaps (colour & depth) of the same resolution
/// into 2 2D textures in octahedral mapping, which may be in different resolution,
/// assuming depth_resolution >= colour_resolution

@piece( HeaderCS )
	#define ProbeIndex uint

	INLINE ushort2 getIrradianceFieldColourBaseXY( ProbeIndex probeIdx )
	{
		ushort2 retVal;
		ushort borderedResolution = @value( colour_resolution )u + 2u;
		retVal.x = (probeIdx * borderedResolution) % @value( colour_full_width )u;
		retVal.y = ((probeIdx * borderedResolution) / @value( colour_full_width )u) *
					borderedResolution;

		// Skip top-left border
		retVal.xy += 1u;

		return retVal;
	}

	INLINE ushort2 getIrradianceFieldDepthBaseXY( ProbeIndex probeIdx )
	{
		ushort2 retVal;
		ushort borderedResolution = @value( depth_resolution )u + 2u;
		retVal.x = (probeIdx * borderedResolution) % @value( depth_full_width )u;
		retVal.y = ((probeIdx * borderedResolution) / @value( depth_full_width )u) *
					borderedResolution;

		// Skip top-left border
		retVal.xy += 1u;

		return retVal;
	}

	INLINE float3 octahedronMappingDecode( float2 f )
	{
		// https://twitter.com/Stubbesaurus/status/937994790553227264
		f = f * 2.0 - 1.0;
		float3 n = float3( f.x, f.y, 1.0f - abs( f.x ) - abs( f.y ) );
		float t = saturate( -n.z );
		n.x += n.x >= 0 ? -t : t;
		n.y += n.y >= 0 ? -t : t;
		return normalize( n );
	}
@end

//in uvec3 gl_NumWorkGroups;
//in uvec3 gl_WorkGroupID;
//in uvec3 gl_LocalInvocationID;
//in uvec3 gl_GlobalInvocationID;
//in uint  gl_LocalInvocationIndex;

@piece( BodyCS )
	ushort2 irradianceFieldColourBaseXY = getIrradianceFieldColourBaseXY( p_probeIdx );
	ushort2 irradianceFieldDepthBaseXY = getIrradianceFieldDepthBaseXY( p_probeIdx );

	ushort2 iColourXY = irradianceFieldColourBaseXY + gl_LocalInvocationID.xy;
	ushort2 iDepthXY = irradianceFieldDepthBaseXY +
					   gl_LocalInvocationID.xy * @value( depth_to_colour_resolution_ratio )u;

	float2 samplingXY = float2( gl_LocalInvocationID.xy ) / @value( colour_resolution );

	float2 offset;
	float3 samplingDir;

	// Do colour.
	//
	// We need to sample multiple pixels and average them because
	// the cubemap resolution tends to be bigger (otherwise glitches caused
	// by rasterization rules become apparent), so we may be converting a cubemap of 32x32x6 to
	// a 2D octahedral map of 6x6 or 8x8
	float4 colourData = float4( 0, 0, 0, 0 );
	/// Note: There is no vert_samples_per_colour_pixel (Because width == height)
	@foreach( horiz_samples_per_colour_pixel, y )
		@foreach( horiz_samples_per_colour_pixel, x )
			offset = float2( @x, @y ) / ( @value( horiz_samples_per_colour_pixel ) * @value( colour_resolution ) );
			samplingDir = octahedronMappingDecode( samplingXY + offset );
			samplingDir.z = -samplingDir.z; // cubemaps are left handed
			colourData += OGRE_SampleLevel( colourCubemap, bilinearSampler, samplingDir, 0 );
		@end
	@end

	colourData /= @value( horiz_samples_per_colour_pixel ) * @value( horiz_samples_per_colour_pixel );
	OGRE_imageWrite2D4( irradianceField, iColourXY, colourData );

	// Do depth
	//
	// This is like colour. While depth res >= colour res; typically 12x12 or 16x16;
	// we (usually, using default params) have 4 times as many depth pixels than colour.
	// And this compute shader run one thread per colour pixel; thus each thread handles
	// more than one depth pixel
	float2 depthData;
	float dist;
	float linearDepth;
	@foreach( depth_to_colour_resolution_ratio, i )
		@foreach( depth_to_colour_resolution_ratio, j )
			depthData = float2( 0.0f, 0.0f );
			@foreach( horiz_samples_per_depth_pixel, y )
				@foreach( horiz_samples_per_depth_pixel, x )
					offset = float2( @i + @x, @j + @y ) / ( @value( horiz_samples_per_depth_pixel ) * @value( depth_resolution ) );
					samplingDir = octahedronMappingDecode( samplingXY + offset );

					samplingDir.z = -samplingDir.z; // cubemaps are left handed
					dist = OGRE_SampleLevel( depthCubemap, bilinearSampler, samplingDir, 0 ).x;
					linearDepth = p_projectionParams.y / (dist - p_projectionParams.x);

					// Put dist in the same space it will be evaluted in during the pixel shader
					dist = dot( abs( linearDepth * samplingDir ), p_numProbes.xyz );

					depthData.x += dist;
					depthData.y += dist * dist;
				@end
			@end

			depthData /= @value( horiz_samples_per_depth_pixel ) * @value( horiz_samples_per_depth_pixel );
			OGRE_imageWrite2D2( irradianceFieldDepth, iDepthXY + ushort2( @i, @j ), depthData );
		@end
	@end
@end
