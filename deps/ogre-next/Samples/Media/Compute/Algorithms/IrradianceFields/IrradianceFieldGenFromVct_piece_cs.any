
//#include "SyntaxHighlightingMisc.h"

@piece( HeaderCS )
	CONST_BUFFER_STRUCT_BEGIN( IrradianceFieldGenParams, 0 )
	{
		float invNumRaysPerPixel;
		float invNumRaysPerIrradiancePixel;
		float unused0;
		uint probesPerRow; // Used by integration CS, not by us

		float coneAngleTan;
		uint numProcessedProbes;
		float vctStartBias;
		float vctInvStartBias;

		//float invFieldResolution;
		uint4 numProbes_threadsPerRow;

		float4x4 irrProbeToVctTransform;
	}
	CONST_BUFFER_STRUCT_END( p );

	#define numProbes numProbes_threadsPerRow.xyz
	#define threadsPerRow numProbes_threadsPerRow.w

	struct Probe
	{
		float3 center;
	};

@property( vct_anisotropic )
	#define OGRE_VCT_ANISO_PROBE_ARG_DECL , OGRE_Texture3D_float4 probeX, OGRE_Texture3D_float4 probeY, OGRE_Texture3D_float4 probeZ
	#define OGRE_VCT_ANISO_PROBE_ARG , probeX, probeY, probeZ
	#define OGRE_VCT_ANISO_ROOT_PROBE_ARG , vctProbeX, vctProbeY, vctProbeZ
@else
	#define OGRE_VCT_ANISO_PROBE_ARG_DECL
	#define OGRE_VCT_ANISO_PROBE_ARG
	#define OGRE_VCT_ANISO_ROOT_PROBE_ARG
@end

	INLINE float4 voxelConeTraceDiff
	(
		float3 posLS,
		float3 dirLS, float tanHalfAngle,
		OGRE_Texture3D_float4 probe
		OGRE_SAMPLER_ARG_DECL( probeSampler )
		OGRE_VCT_ANISO_PROBE_ARG_DECL
		PARAMS_ARG_DECL
	)
	{
		float dist = p.vctStartBias;
		float alpha = 0.0;
		float3 color = float3( 0.0, 0.0, 0.0 );

		float diameter = max( p.vctStartBias, 2.0 * tanHalfAngle * dist );

		float lodLevel	= 0.0;

		@property( !vct_anisotropic )
			#define VCT_ANISOTROPIC_EARLY_OUT
		@else
			#define VCT_ANISOTROPIC_EARLY_OUT && lodLevel <= 0.5
		@end
		while( dist < 1.414213562f && alpha < 0.95 VCT_ANISOTROPIC_EARLY_OUT )
		{
			float4 scolor = OGRE_SampleLevel( probe, probeSampler,
											  posLS + dist * dirLS,
											  lodLevel );
			float a = (1.0f - alpha);
			color += scolor.xyz * a;
			alpha += a * scolor.w;
			dist += diameter * 0.5f;
			diameter = 2.0 * tanHalfAngle * dist;
			lodLevel = log2( diameter * p.vctInvStartBias );
		}

		@property( vct_anisotropic )
			float3 isNegative;
			isNegative.x = dirLS.x < 0 ? 0.5f : 0.0f;
			isNegative.y = dirLS.y < 0 ? 0.5f : 0.0f;
			isNegative.z = dirLS.z < 0 ? 0.5f : 0.0f;

			float3 dirLSSquared = dirLS.xyz * dirLS.xyz;

			while( dist < 1.414213562f && alpha < 0.95 )
			{
				float3 sampleUVW = posLS + dist * dirLS;
				sampleUVW.x = saturate( sampleUVW.x ) * 0.5;

				float4 xColor = OGRE_SampleLevel( probeX, probeSampler,
												  sampleUVW + float3( isNegative.x, 0, 0 ),
												  lodLevel );
				float4 yColor = OGRE_SampleLevel( probeY, probeSampler,
												  sampleUVW + float3( isNegative.y, 0, 0 ),
												  lodLevel );
				float4 zColor = OGRE_SampleLevel( probeZ, probeSampler,
												  sampleUVW + float3( isNegative.z, 0, 0 ),
												  lodLevel );

				float4 scolor = dirLSSquared.x * xColor +
								dirLSSquared.y * yColor +
								dirLSSquared.z * zColor;
				float a = (1.0f - alpha);
				color += scolor.xyz * a;
				alpha += a * scolor.w;
				dist += diameter * 0.5f;
				diameter = 2.0 * tanHalfAngle * dist;
				lodLevel = log2( diameter * p.vctInvStartBias );
			}
		@end

		// Put dist in the same space it will be evaluted in during the pixel shader
		dist *= dot( abs( dirLS ), float3( p.numProbes.xyz ) );

		return float4( color, dist );
	}

	#define RayIndex uint
	#define ProbeIndex uint

	INLINE RayIndex getRayIndex( uint2 globalInvocationId PARAMS_ARG_DECL )
	{
		return globalInvocationId.x + globalInvocationId.y * p.threadsPerRow;
	}

	INLINE ProbeIndex getProbeIdx( RayIndex rayIndex PARAMS_ARG_DECL )
	{
		return rayIndex / @value( num_rays_per_probe )u + p.numProcessedProbes;
	}

	INLINE ushort4 getIrradianceFieldIrradDepthXY( RayIndex rayIndex, ProbeIndex probeIdx )
	{
		ushort2 irradXY;
		uint irradPixelIdx = rayIndex / @value( num_rays_per_irrad_pixel )u;
		// Calculate local xy pixel e.g. irradXY is in range [0; 8)
		irradXY.x = irradPixelIdx % @value( irrad_resolution )u;
		irradXY.y = (irradPixelIdx % @value( num_irrad_pixels_per_probe )u) / @value( irrad_resolution )u;

		ushort2 depthXY = irradXY; // Store depthXY for later

		// Calculate local -> global xy pixel e.g. irradXY is in range [0; 2560)
		ushort borderedResolution = @value( irrad_resolution )u + 2u;
		irradXY.x += (probeIdx * borderedResolution) % @value( irrad_full_width )u;
		irradXY.y += ((probeIdx * borderedResolution) / @value( irrad_full_width )u) *
					 borderedResolution;

		// Scale depthXY to proper range e.g. depthXY is in range [0; 16)
		depthXY.xy *= @value( colour_to_depth_resolution_ratio );

		// depthXY is in proper range, but instead of being 0, 1, 2, 3, 4, 5, ... 15
		// many of these values are repeated: 0, 0, 0, 0, 4, 4, 4, 4, 8, 8, 8, 8, 12, 12, 12, 12
		// We need to fix that
		uint irradPixelRaySubIdx = rayIndex % @value( num_rays_per_irrad_pixel )u;
		depthXY.x += irradPixelRaySubIdx % @value( colour_to_depth_resolution_ratio )u;
		depthXY.y += irradPixelRaySubIdx / @value( colour_to_depth_resolution_ratio )u;

		// Calculate local -> global xy pixel e.g. depthXY is in range [0; 4608)
		borderedResolution = @value( depth_resolution )u + 2u;
		depthXY.x += (probeIdx * borderedResolution) % @value( depth_full_width )u;
		depthXY.y += ((probeIdx * borderedResolution) / @value( depth_full_width )u) *
					 borderedResolution;

		ushort4 retVal = ushort4 ( irradXY, depthXY );

		// Skip top-left border
		retVal += 1u;

		return retVal;
	}

	INLINE float3 getProbeCenterInVctSpace( ProbeIndex probeIdx PARAMS_ARG_DECL )
	{
		// Snippet taken from Dynamic Diffuse Global Illumination with Ray-Traced Irradiance Fields
		// Zander Majercik, NVIDIA; Jean-Philippe Guertin, Université de Montréal;
		// Derek Nowrouzezahrai, McGill University; Morgan McGuire, NVIDIA and McGill University
		// http://jcgt.org/published/0008/02/01/

		// Works for any # of probes
		/*
		iPos.x = probeIdx % p.numProbes.x;
		iPos.y = (probeIdx % (p.numProbes.x * p.numProbes.y)) / p.numProbes.x;
		iPos.z = probeIdx / (p.numProbes.x * p.numProbes.y);
		*/

		// Assumes numProbes are powers of two.
		// Saves ~10ms compared to the divisions above
		// Precomputing the MSB actually slows this code down substantially
		float3 vPos;
		vPos.x = probeIdx & (p.numProbes.x - 1u);
		vPos.y = (probeIdx & ((p.numProbes.x * p.numProbes.y) - 1u)) >> findMSB( p.numProbes.x );
		vPos.z = probeIdx >> findMSB( p.numProbes.x * p.numProbes.y );
		return vPos;
	}
@end

//in uvec3 gl_NumWorkGroups;
//in uvec3 gl_WorkGroupID;
//in uvec3 gl_LocalInvocationID;
//in uvec3 gl_GlobalInvocationID;
//in uint  gl_LocalInvocationIndex;

@piece( BodyCS )
	RayIndex rayIdx = getRayIndex( gl_GlobalInvocationID.xy PARAMS_ARG );
	ProbeIndex probeIdx = getProbeIdx( rayIdx PARAMS_ARG );

	float3 dir = bufferFetch( directionsBuffer, rshort( rayIdx % @value( num_rays_per_probe ) ) ).xyz;

	float3 probeCenter = getProbeCenterInVctSpace( probeIdx PARAMS_ARG );
	float3 posLS = mul( float4( probeCenter, 1.0f ), p.irrProbeToVctTransform ).xyz;

	float4 diffuse = voxelConeTraceDiff( posLS, dir, p.coneAngleTan,
										 vctProbe OGRE_SAMPLER_ARG( probeSampler )
										 OGRE_VCT_ANISO_ROOT_PROBE_ARG
										 PARAMS_ARG );
	g_diffuseDepth[gl_LocalInvocationIndex] = diffuse;

	__sharedOnlyBarrier;

	ushort4 irradDepthXY = getIrradianceFieldIrradDepthXY( rayIdx, probeIdx );

	if( gl_LocalInvocationIndex % @value( num_rays_per_depth_pixel )u == 0u )
	{
		float sqDepth = diffuse.w * diffuse.w;

		//Reduction
		for( uint i=1u; i<@value( num_rays_per_depth_pixel )u; ++i )
		{
			float4 otherVal = g_diffuseDepth[gl_LocalInvocationIndex + i];
			diffuse.xyzw += otherVal.xyzw;
			sqDepth += otherVal.w * otherVal.w;
		}

		//We can already write depth
		diffuse.w *= p.invNumRaysPerPixel;
		sqDepth *= p.invNumRaysPerPixel;
		OGRE_imageWrite2D2( irradianceFieldDepth, irradDepthXY.zw, float2( diffuse.w, sqDepth ) );

		g_diffuseDepth[gl_LocalInvocationIndex].xyz = diffuse.xyz;
	}

	__sharedOnlyBarrier;

	// Irradiance has 'bigger pixels' than depth, thus we need to reduce again.
	if( gl_LocalInvocationIndex % @value( num_rays_per_irrad_pixel ) == 0u )
	{
		for( uint i=1u; i<@value( reduction_iterations ); ++i )
			diffuse.xyz += g_diffuseDepth[gl_LocalInvocationIndex + i * @value( num_rays_per_depth_pixel )u].xyz;

		diffuse.xyz *= p.invNumRaysPerIrradiancePixel;

		OGRE_imageWrite2D4( irradianceField, irradDepthXY.xy, diffuse );
	}
@end
