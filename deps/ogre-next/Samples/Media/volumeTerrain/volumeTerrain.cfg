# World data
source = volumeTerrainBig.dds
# World size of the data
sourceDimensions = 384 384 384
# World scale
scale = 10.0
# Whether to use trilinear interpolation for the source or not
trilinearValue = true
# Whether to use trilinear interpolation for the gradients of the source or not
trilinearGradient = false
# Whether to use sobel filtering for the gradients of the source or not
sobelGradient = false
# Whether to load the terrain asynchronously
async = false

# Spatial part to scan and build the volume meshes from
scanFrom = 0 0 0
scanTo = 384 384 384

# Amount of LOD level
level = 5
# The first LOD level to create geometry for. For scenarios where the lower levels won't be visible anyway. 0 is the default and switches this off.
createGeometryFromLevel = 3
# The geometric error of LOD level with the highest detail * errorMultiplicator
baseError = 1.8
# The multiplicator between LOD levels. errorOfCurrentLevel = baseError * levelIndex * errorMultiplicator
errorMultiplicator = 0.9
# The maximum accepted screen space error when chosing the LOD levels to render
maxScreenSpaceError = 20

# Whether or not to create the visualization of the octrees
createOctreeVisualization = false
# Whether or not to create the visualization of the dual grids
createDualGridVisualization = false
# The factor defining the length of the skirts. Less means more triangles and less loading time, but if too small, cracks can occure.
skirtFactor = 1.0

# The material of the chunks
material = triplanarReferenceHigh

# The material for the lowest 3 levels of the chunktree. This is set after the global material above.
materialOfLevel0 = triplanarReferenceLow
materialOfLevel1 = triplanarReferenceLow
materialOfLevel2 = triplanarReferenceLow