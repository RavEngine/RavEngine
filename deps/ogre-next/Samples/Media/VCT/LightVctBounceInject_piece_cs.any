
//#include "SyntaxHighlightingMisc.h"

@piece( HeaderCS )
	@property( vct_anisotropic )
		#define OGRE_VCT_ANISO_PROBE_ARG_DECL , OGRE_Texture3D_float4 probeX, OGRE_Texture3D_float4 probeY, OGRE_Texture3D_float4 probeZ
		#define OGRE_VCT_ANISO_PROBE_ARG , probeX, probeY, probeZ
		#define OGRE_VCT_ANISO_ROOT_PROBE_ARG , vctProbeX, vctProbeY, vctProbeZ
	@else
		#define OGRE_VCT_ANISO_PROBE_ARG_DECL
		#define OGRE_VCT_ANISO_PROBE_ARG
		#define OGRE_VCT_ANISO_ROOT_PROBE_ARG
	@end

	INLINE float3 voxelConeTraceDiff
	(
		float3 posLS,
		float3 dirLS, float tanHalfAngle,
		OGRE_Texture3D_float4 probe
		OGRE_SAMPLER_ARG_DECL( probeSampler )
		OGRE_VCT_ANISO_PROBE_ARG_DECL
		PARAMS_ARG_DECL
	)
	{
		float dist = p_vctStartBias;
		float alpha = 0.0;
		float3 color = float3( 0.0, 0.0, 0.0 );

		float diameter = max( p_vctStartBias, 2.0 * tanHalfAngle * dist );

		float lodLevel	= 0.0;

		@property( !vct_anisotropic )
			#define VCT_ANISOTROPIC_EARLY_OUT
		@else
			#define VCT_ANISOTROPIC_EARLY_OUT && lodLevel <= 0.5
		@end
		while( dist < 1.414213562f && alpha < 0.95 VCT_ANISOTROPIC_EARLY_OUT )
		{
			float4 scolor = OGRE_SampleLevel( probe, probeSampler,
											  posLS + dist * dirLS,
											  lodLevel );
			float a = (1.0f - alpha);
			color += scolor.xyz * a;
			alpha += a * scolor.w;
			dist += diameter * 0.5f;
			diameter = 2.0 * tanHalfAngle * dist;
			lodLevel = log2( diameter * p_vctInvStartBias );
		}

		@property( vct_anisotropic )
			float3 isNegative;
			isNegative.x = dirLS.x < 0 ? 0.5f : 0.0f;
			isNegative.y = dirLS.y < 0 ? 0.5f : 0.0f;
			isNegative.z = dirLS.z < 0 ? 0.5f : 0.0f;

			float3 dirLSSquared = dirLS.xyz * dirLS.xyz;

			while( dist < 1.414213562f && alpha < 0.95 )
			{
				float3 sampleUVW = posLS + dist * dirLS;
				sampleUVW.x = saturate( sampleUVW.x ) * 0.5;

				float4 xColor = OGRE_SampleLevel( probeX, probeSampler,
												  sampleUVW + float3( isNegative.x, 0, 0 ),
												  lodLevel );
				float4 yColor = OGRE_SampleLevel( probeY, probeSampler,
												  sampleUVW + float3( isNegative.y, 0, 0 ),
												  lodLevel );
				float4 zColor = OGRE_SampleLevel( probeZ, probeSampler,
												  sampleUVW + float3( isNegative.z, 0, 0 ),
												  lodLevel );

				float4 scolor = dirLSSquared.x * xColor +
								dirLSSquared.y * yColor +
								dirLSSquared.z * zColor;
				float a = (1.0f - alpha);
				color += scolor.xyz * a;
				alpha += a * scolor.w;
				dist += diameter * 0.5f;
				diameter = 2.0 * tanHalfAngle * dist;
				lodLevel = log2( diameter * p_vctInvStartBias );
			}
		@end

		return color;
	}

	INLINE void computeVctProbe
	(
		OGRE_INOUT_REF( float3, outDiffuse ),
		float3 posLS, float3 geomNormal, float3x3 TBN,
		OGRE_Texture3D_float4 probe OGRE_SAMPLER_ARG_DECL( probeSampler )
		OGRE_VCT_ANISO_PROBE_ARG_DECL
		PARAMS_ARG_DECL
	)
	{
		geomNormal.xyz /= max3( abs( geomNormal.x ), abs( geomNormal.y ), abs( geomNormal.z ) );
		posLS = posLS + geomNormal.xyz * p_invVoxelResolution;

		if( posLS.x < 0.0 || posLS.x > 1.0 ||
			posLS.y < 0.0 || posLS.y > 1.0 ||
			posLS.z < 0.0 || posLS.z > 1.0 )
		{
			return;
		}

		float3 cone_dirs[6] =
			OGRE_ARRAY_START( float3 )
				float3( 0.0, 0.0, 1.0 ),
				float3( 0.866025, 0.0, 0.5 ),
				float3( 0.267617, 0.823639, 0.5 ),
				float3( -0.700629, 0.509037, 0.5 ),
				float3( -0.700629, -0.509037, 0.5 ),
				float3( 0.267617, -0.823639, 0.5 )
			OGRE_ARRAY_END;

		float coneWeights[6] = OGRE_ARRAY_START( float ) 0.25, 0.15, 0.15, 0.15, 0.15, 0.15 OGRE_ARRAY_END;
		float coneAngleTan = 0.577;
		float minRefTan = 0.0;

		//Radiance / diffuse
		float3 light = float3( 0.0f, 0.0f, 0.0f );
		for( int i=0; i<6; ++i )
		{
			float3 dir = mul( TBN, cone_dirs[i] );
			dir = normalize( dir );
			light += coneWeights[i] * voxelConeTraceDiff( posLS, dir,coneAngleTan,
														  probe OGRE_SAMPLER_ARG( probeSampler )
														  OGRE_VCT_ANISO_PROBE_ARG
														  PARAMS_ARG );
		}

		outDiffuse.xyz = light;
	}

	@insertpiece( DeclSRgbFuncs )
@end

//in uvec3 gl_NumWorkGroups;
//in uvec3 gl_WorkGroupID;
//in uvec3 gl_LocalInvocationID;
//in uvec3 gl_GlobalInvocationID;
//in uint  gl_LocalInvocationIndex;

@piece( BodyCS )
	float3 voxelUvwPos = p_invVoxelResolution * (float3( gl_GlobalInvocationID.xyz ) + 0.5f);

	float4 albedoVal = OGRE_Load3D( voxelAlbedoTex, gl_GlobalInvocationID.xyz, 0 );
	float4 normalVal = OGRE_Load3D( voxelNormalTex, gl_GlobalInvocationID.xyz, 0 );
	float4 currentLight = OGRE_Load3D( vctProbe, gl_GlobalInvocationID.xyz, 0 );

	if( anyInvocationARB( albedoVal.a > 0 ) )
	{
		normalVal.xyz = normalVal.xyz * 2.0f - 1.0f;
		normalVal.xyz = normalize( normalVal.xyz );

		float3 vTangent = cross( normalVal.xyz, float3( 1, 0, 0 ) );
		if( abs( 1.0 - abs( dot( normalVal.xyz, float3( 1, 0, 0 ) ) ) ) < 1e-6f )
			vTangent = cross( normalVal.xyz, float3( 0, 1, 0 ) );
		float3 vBinormal = cross( vTangent, normalVal.xyz );
		float3x3 TBN = buildFloat3x3( vTangent, vBinormal, normalVal.xyz );

		float3 vctDiffuse = float3( 0, 0, 0 );
		computeVctProbe( vctDiffuse, voxelUvwPos, normalVal.xyz, TBN,
						 vctProbe OGRE_SAMPLER_ARG( vctProbeSampler )
						 OGRE_VCT_ANISO_ROOT_PROBE_ARG PARAMS_ARG );
		currentLight.xyz += albedoVal.xyz * vctDiffuse.xyz * p_iterationDampening;
	}

	wshort3 voxelCelUvw = wshort3( gl_GlobalInvocationID.xyz );
	OGRE_imageWrite3D4( lightVoxel, voxelCelUvw, toSRGB( currentLight ) );
@end
