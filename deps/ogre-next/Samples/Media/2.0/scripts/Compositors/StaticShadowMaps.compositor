compositor_node StaticShadowMapsRenderingNode
{
	in 0 rt_renderwindow

	target rt_renderwindow
	{
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}
			overlays	on
			shadows		StaticShadowMapsShadowNode
		}
	}
}

abstract target cubemap_target_shadow
{
	pass render_scene
	{
		load
		{
			all                                 clear
			clear_colour_reverse_depth_aware	1 1 1 1
		}
		store
		{
			//We only care about the contents of the colour target with point shadows
			depth			dont_care
			stencil			dont_care
		}
		camera_cubemap_reorient true
	}
}

compositor_node_shadow StaticShadowMapsShadowNode
{
	technique pssm

	texture atlas		3072 2048 PFG_D32_FLOAT
	texture atlasStatic	4096 8192 PFG_D32_FLOAT
	texture tmpCubemap	1024 1024 PFG_R32_FLOAT cubemap depth_format PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
	shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
	shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

	technique focused
	shadow_map 3 atlasStatic uv 0.0 0.0 1.0 0.5 light 1
	shadow_map 4 atlasStatic uv 0.0 0.5 1.0 0.5 light 2

	target atlas
	{
		pass clear
		{
			clear_colour_reverse_depth_aware	1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	//Clear the static atlas first. Do this inside a shadow_map_target_type block so that it only
	//gets executed if shadow_map 3 is flagged as dirty (instead of clearing every frame).
	shadow_map_target_type directional spot point
	{
		shadow_map 3
		{
			pass clear
			{
				clear_colour_reverse_depth_aware	1 1 1 1
				shadow_map_full_viewport yes
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsm
					input 0 tmpCubemap
				}
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}
}

/*
One shadow map per light version, just as an example.
compositor_node_shadow StaticShadowMapsShadowNode2
{
	technique pssm

	texture pssm0 2048 2048 PFG_D32_FLOAT
	texture pssm1 1024 1024 PFG_D32_FLOAT
	texture pssm2 1024 1024 PFG_D32_FLOAT

	texture spot0 2048 2048 PFG_D32_FLOAT
	texture spot1 2048 2048 PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 pssm0 light 0 split 0
	shadow_map 1 pssm1 light 0 split 1
	shadow_map 2 pssm2 light 0 split 2

	technique focused
	shadow_map 3 spot0 light 1
	shadow_map 4 spot1 light 2

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
				load
				{
					all									clear
					clear_colour_reverse_depth_aware	1 1 1 1
				}
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
				load
				{
					all									clear
					clear_colour_reverse_depth_aware	1 1 1 1
				}
			}
		}
	}
}*/

workspace StaticShadowMapsWorkspace
{
	connect_output StaticShadowMapsRenderingNode 0
}
